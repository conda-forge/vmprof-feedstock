From 854191e03004ae07d6cf1a5a6edebe5bf25fc715 Mon Sep 17 00:00:00 2001
From: Timothy Palpant <palpant@dropbox.com>
Date: Wed, 7 Aug 2019 14:39:00 -0400
Subject: [PATCH] Fix build for CPython 3 on OS X

---
 src/vmprof_common.c | 11 -----------
 src/vmprof_common.h | 11 -----------
 src/vmprof_win.c    | 11 +++++++++++
 3 files changed, 11 insertions(+), 22 deletions(-)

diff --git a/src/vmprof_common.c b/src/vmprof_common.c
index 729e69e..47b5794 100644
--- a/src/vmprof_common.c
+++ b/src/vmprof_common.c
@@ -165,17 +165,6 @@ int opened_profile(const char *interp_name, int memory, int proflines, int nativ
 }
 
 
-/* Seems that CPython 3.5.1 made our job harder.  Did not find out how
-   to do that without these hacks.  We can't use PyThreadState_GET(),
-   because that calls PyThreadState_Get() which fails an assert if the
-   result is NULL. */
-#if PY_MAJOR_VERSION >= 3 && !defined(_Py_atomic_load_relaxed)
-                             /* this was abruptly un-defined in 3.5.1 */
-void *volatile _PyThreadState_Current;
-   /* XXX simple volatile access is assumed atomic */
-#  define _Py_atomic_load_relaxed(pp)  (*(pp))
-#endif
-
 #ifdef RPYTHON_VMPROF
 #ifndef RPYTHON_LL2CTYPES
 PY_STACK_FRAME_T *get_vmprof_stack(void)
diff --git a/src/vmprof_common.h b/src/vmprof_common.h
index b52ee5f..3c313ce 100644
--- a/src/vmprof_common.h
+++ b/src/vmprof_common.h
@@ -83,17 +83,6 @@ char *vmprof_init(int fd, double interval, int memory,
 
 int opened_profile(const char *interp_name, int memory, int proflines, int native, int real_time);
 
-/* Seems that CPython 3.5.1 made our job harder.  Did not find out how
-   to do that without these hacks.  We can't use PyThreadState_GET(),
-   because that calls PyThreadState_Get() which fails an assert if the
-   result is NULL. */
-#if PY_MAJOR_VERSION >= 3 && !defined(_Py_atomic_load_relaxed)
-                             /* this was abruptly un-defined in 3.5.1 */
-void *volatile _PyThreadState_Current;
-   /* XXX simple volatile access is assumed atomic */
-#  define _Py_atomic_load_relaxed(pp)  (*(pp))
-#endif
-
 #ifdef RPYTHON_VMPROF
 #ifndef RPYTHON_LL2CTYPES
 PY_STACK_FRAME_T *get_vmprof_stack(void);
diff --git a/src/vmprof_win.c b/src/vmprof_win.c
index 240c2e9..daadd98 100644
--- a/src/vmprof_win.c
+++ b/src/vmprof_win.c
@@ -104,6 +104,17 @@ int vmprof_snapshot_thread(DWORD thread_id, PY_WIN_THREAD_STATE *tstate, prof_st
 #endif
 }
 
+/* Seems that CPython 3.5.1 made our job harder.  Did not find out how
+   to do that without these hacks.  We can't use PyThreadState_GET(),
+   because that calls PyThreadState_Get() which fails an assert if the
+   result is NULL. */
+#if PY_MAJOR_VERSION >= 3 && !defined(_Py_atomic_load_relaxed)
+                             /* this was abruptly un-defined in 3.5.1 */
+void *volatile _PyThreadState_Current;
+   /* XXX simple volatile access is assumed atomic */
+#  define _Py_atomic_load_relaxed(pp)  (*(pp))
+#endif
+
 #ifndef RPYTHON_VMPROF
 static
 PY_WIN_THREAD_STATE * get_current_thread_state(void)
