From 836d8ea3f1dd205335d07da64f9bb7126a6ba51a Mon Sep 17 00:00:00 2001
From: fijal <fijall@gmail.com>
Date: Tue, 23 Feb 2021 11:19:09 +0000
Subject: [PATCH] make vmprof at least mostly working on cpy/aarch64 combo

---
 setup.py                     | 2 ++
 src/_vmprof.c                | 4 +++-
 src/vmprof_config.h          | 2 ++
 vmprof/test/test_c_source.py | 5 ++++-
 4 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 8be891ce..c96aece2 100644
--- a/setup.py
+++ b/setup.py
@@ -61,6 +61,8 @@ def _supported_unix():
                 libraries.append('unwind-x86_64')
             else:
                 libraries.append('unwind-x86')
+        elif platform.machine() == 'aarch64':
+            libraries.append('unwind-aarch64')
         else:
             raise NotImplementedError("unknown platform.machine(): %s" %
                                       platform.machine())
diff --git a/src/_vmprof.c b/src/_vmprof.c
index 34ff0e47..5a8c4519 100644
--- a/src/_vmprof.c
+++ b/src/_vmprof.c
@@ -38,6 +38,8 @@ PY_EVAL_RETURN_T * vmprof_eval(PY_STACK_FRAME_T *f, int throwflag)
     register PY_STACK_FRAME_T * callee_saved asm("edi");
 #elif defined(__arm__)
     register PY_STACK_FRAME_T * callee_saved asm("r4");
+#elif defined(__aarch64__)
+    register PY_STACK_FRAME_T * callee_saved asm("x19");
 #else
 #    error "platform not supported"
 #endif
@@ -47,7 +49,7 @@ PY_EVAL_RETURN_T * vmprof_eval(PY_STACK_FRAME_T *f, int throwflag)
         "movq %1, %0\t\n"
 #elif defined(X86_32)
         "mov %1, %0\t\n"
-#elif defined(__arm__)
+#elif defined(__arm__) || defined(__aarch64__)
 	"mov %1, %0\t\n"
 #else
 #    error "platform not supported"
diff --git a/src/vmprof_config.h b/src/vmprof_config.h
index 3985ab67..69a1b585 100644
--- a/src/vmprof_config.h
+++ b/src/vmprof_config.h
@@ -24,6 +24,8 @@
   #define PC_FROM_UCONTEXT uc_mcontext.gregs[REG_EIP]
 #elif defined(__s390x__)
   #define PC_FROM_UCONTEXT uc_mcontext.psw.addr
+#elif defined(__aarch64__)
+  #define PC_FROM_UCONTEXT uc_mcontext.pc
 #else
   /* linux, gnuc */
   #define PC_FROM_UCONTEXT uc_mcontext.gregs[REG_RIP]
diff --git a/vmprof/test/test_c_source.py b/vmprof/test/test_c_source.py
index 98b112a1..309fb3e4 100644
--- a/vmprof/test/test_c_source.py
+++ b/vmprof/test/test_c_source.py
@@ -1,3 +1,4 @@
+import platform
 import sys
 import pytest
 import vmprof
@@ -23,7 +24,9 @@ def setup_class(cls):
             source = fd.read().decode()
             libs = [] #['unwind', 'unwind-x86_64']
             if sys.platform.startswith('linux'):
-                libs = ['unwind', 'unwind-x86_64']
+                libs = ['unwind']
+            if platform.machine() == 'x86_64':
+                libs.append('unwind-x86_64')
             # trick: compile with _CFFI_USE_EMBEDDING=1 which will not define Py_LIMITED_API
             stack_ffi.set_source("vmprof.test._test_stack", source, include_dirs=['src'],
                                  define_macros=[('_CFFI_USE_EMBEDDING',1), ('PY_TEST',1),
